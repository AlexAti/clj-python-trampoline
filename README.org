* Motivation

I want to use libpython-clj from an already running python process, without needing any special python builds.

* Examples

- [[examples/blender]]

* Running python with embedded nREPL

The following prepares and runs the python process (or application with embedded python) and bootstraps nREPL via a python script, passed via the command line.

1. Preparing python environment:

   #+BEGIN_SRC sh
   mkdir -p .trampoline
   clj -m clj-python-trampoline.resources --nrepl > .trampoline/nrepl.py
   clj -m clj-python-trampoline.resources --requirements > .trampoline/requirements.txt
   pip3 install -r .trampoline/requirements.txt
   #+END_SRC

2. Bootstrapping nREPL from python environment

   #+BEGIN_SRC sh
   # Overrides
   export CLJ_ARGS=...
   export NREPL_CMDLINE_ARGS=...

   python3 .trampoline/nrepl.py # or blender -P .trampoline/nrepl.py
   #+END_SRC

Environment variable overrides for nrepl.py:

- *CLJ_ARGS*

  Used to call "clj" to gather the classpath for starting the embedded jvm.

  #+BEGIN_SRC sh
  export CLJ_ARGS="-Sdeps '{:deps {nrepl {:mvn/version \"0.7.0\"} refactor-nrepl \
      {:mvn/version \"RELEASE\"} cider/cider-nrepl {:mvn/version \"RELEASE\"}}}'"
  #+END_SRC

- *NREPL_CMDLINE_ARGS*

  Passed to "nrepl.cmdline".

  #+BEGIN_SRC sh
  export NREPL_CMDLINE_ARGS="--middleware [\"refactor-nrepl.middleware/wrap-refactor\",\"cider.nrepl/cider-middleware\"]"
  #+END_SRC

* Assumptions

*javabridge* is installed with your local "pip3" command, which should be installing to the python environment that blender uses.

(Tested on Fedora 31)

* Implementation

- *javabridge* provides the python -> jvm connection.
- *libpython-clj* is patched at runtime, to be able to use it from inside an existing python process. This patch is experimental and will certainly break something.
