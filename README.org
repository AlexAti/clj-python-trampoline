* Motivation

I want to use libpython-clj from an already running python process, without needing any special python builds.

* Examples

- [[examples/blender]]

* Running python with embedded nREPL

The following starts the python process (or application with embedded python) and bootstraps nREPL via a python script, passed via the command line.

#+BEGIN_SRC sh
clj -m clj-python-trampoline.resources --template | bash
#+END_SRC

The following environment variables can be overriden:

- *PYTHON_COMMAND*

  The expansion of this variable should be a command that can execute the "trampoline.py" script.

  #+BEGIN_SRC sh
  export PYTHON_COMMAND="blender -P" # default: python3
  #+END_SRC

- *CLJ_ARGS*

  Used to call "clj" to gather the classpath for starting the embedded jvm.

  example: "-Sdeps '{:deps {nrepl {:mvn/version \"0.7.0\"} refactor-nrepl {:mvn/version \"RELEASE\"} cider/cider-nrepl {:mvn/version \"RELEASE\"}}}'"

- *NREPL_CMDLINE_ARGS*

  Passed to "nrepl.cmdline"

  example: "--middleware [\"refactor-nrepl.middleware/wrap-refactor\",\"cider.nrepl/cider-middleware\"]"

- *PYTHON_PIP_COMMAND*

  Overries the "pip" command for installing *javabridge*.

  default: "pip3"

- *PYTHON_PIP_ARGS*

  Extra arguments for pip

  example: "--user"

* Assumptions

*javabridge* is installed with your local "pip3" command, which should be installing to the python environment that blender uses.

(Tested on Fedora 31)

* Implementation

- *javabridge* provides the python -> jvm connection.
- *libpython-clj* is patched at runtime, to be able to use it from inside an existing python process. This patch is experimental and will certainly break something.
