* Motivation

I want to use libpython-clj from an already running python process, without needing any special python builds.

* Examples

- [[examples/blender]]

* Running python with embedded nREPL

#+BEGIN_SRC sh
clj -m clj-python-trampoline.resources --template | bash
#+END_SRC

The following environment variables can be overriden:

- PYTHON_COMMAND (default: "python3") (example: "blender -P")

  The expansion of this variable should be a command that can execute the "trampoline.py" script.

- CLJ_ARGS (example: "-Sdeps '{:deps {nrepl {:mvn/version \"0.7.0\"} refactor-nrepl {:mvn/version \"RELEASE\"} cider/cider-nrepl {:mvn/version \"RELEASE\"}}}'")

  Used to call "clj" to gather the classpath for starting the embedded jvm.

- NREPL_CMDLINE_ARGS (example: "--middleware [\"refactor-nrepl.middleware/wrap-refactor\",\"cider.nrepl/cider-middleware\"]")

  Passed to "nrepl.cmdline"

- PYTHON_PIP_COMMAND (default: "pip3")

  Overries the "pip" command for installing *javabridge*.

* Assumptions

*javabridge* is installed with your local "pip3" command, which should be installing to the python environment that blender uses.

(Tested on Fedora 31)

* Implementation

- *javabridge* provides the python -> jvm connection.
- *libpython-clj* is patched at runtime, to be able to use it from inside an existing python process. This patch is experimental and will certainly break something.
